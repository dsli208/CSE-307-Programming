
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLETINnonassocIFELSErightORrightANDleftEQUALSNOTEQUALSLEQGEQLTGTleftPLUSMINUSleftTIMESDIVIDEMODnonassocNOTAND DIVIDE ELSE EQUALS FALSE GEQ GT IF IN LEQ LET LPAREN LT MINUS MOD NAME NOT NOTEQUALS NUMBER OR PLUS RPAREN THEN TIMES TRUEstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression EQUALS expression\n                  | expression LEQ expression\n                  | expression LT expression\n                  | expression GEQ expression\n                  | expression GT expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression NOTEQUALS expressionexpression : MINUS expression %prec NOT\n                  | NOT expressionexpression : LET NAME EQUALS expression IN expressionexpression : IF expression THEN expression ELSE expressionexpression : basicexpressionbasicexpression : LPAREN expression RPARENbasicexpression : TRUEbasicexpression : FALSEbasicexpression : NUMBERbasicexpression : NAME'
    
_lr_action_items = {'NOTEQUALS':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,23,-15,23,23,-16,-20,23,23,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,23,23,23,23,]),'THEN':([1,2,3,8,9,13,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,51,52,],[-23,-19,-21,-22,-24,-15,32,-16,-20,-12,-13,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,-18,-17,]),'NUMBER':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'TRUE':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'MINUS':([0,1,2,3,4,6,7,8,9,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,],[4,-23,-19,-21,4,4,4,-22,-24,4,29,-15,29,29,-16,4,4,4,4,4,4,4,4,4,4,4,4,4,-20,4,4,29,29,29,29,-5,29,29,-4,29,29,-2,-3,-6,29,29,4,4,29,29,]),'GEQ':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,20,-15,20,20,-16,-20,20,20,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,20,20,20,20,]),'RPAREN':([1,2,3,8,9,13,14,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,51,52,],[-23,-19,-21,-22,-24,-15,31,-16,-20,-12,-13,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,-18,-17,]),'LT':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,27,-15,27,27,-16,-20,27,27,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,27,27,27,27,]),'PLUS':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,28,-15,28,28,-16,-20,28,28,28,28,-5,28,28,-4,28,28,-2,-3,-6,28,28,28,28,]),'$end':([1,2,3,5,8,9,12,13,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,51,52,],[-23,-19,-21,0,-22,-24,-1,-15,-16,-20,-12,-13,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,-18,-17,]),'GT':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,21,-15,21,21,-16,-20,21,21,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,21,21,21,21,]),'DIVIDE':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,22,-15,22,22,-16,-20,22,22,22,22,-5,22,22,-4,22,22,22,22,-6,22,22,22,22,]),'EQUALS':([1,2,3,8,9,12,13,14,15,16,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,24,-15,24,24,33,-16,-20,24,24,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,24,24,24,24,]),'TIMES':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,25,-15,25,25,-16,-20,25,25,25,25,-5,25,25,-4,25,25,25,25,-6,25,25,25,25,]),'LPAREN':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'IN':([1,2,3,8,9,13,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,52,],[-23,-19,-21,-22,-24,-15,-16,-20,-12,-13,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,50,-18,-17,]),'ELSE':([1,2,3,8,9,13,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,51,52,],[-23,-19,-21,-22,-24,-15,-16,-20,-12,-13,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,49,-18,-17,]),'IF':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'AND':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,18,-15,18,18,-16,-20,18,18,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,18,18,18,18,]),'FALSE':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NAME':([0,4,6,7,10,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[9,9,9,9,16,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'LEQ':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,26,-15,26,26,-16,-20,26,26,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,26,26,26,26,]),'LET':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'NOT':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'OR':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,19,-15,19,19,-16,-20,-12,19,-10,-11,-5,-14,-7,-4,-8,-9,-2,-3,-6,19,19,19,19,]),'MOD':([1,2,3,8,9,12,13,14,15,17,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,],[-23,-19,-21,-22,-24,30,-15,30,30,-16,-20,30,30,30,30,-5,30,30,-4,30,30,30,30,-6,30,30,30,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'basicexpression':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'expression':([0,4,6,7,11,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,49,50,],[12,13,14,15,17,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,]),'statement':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_toplevel','flatteparser.py',34),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','flatteparser.py',39),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','flatteparser.py',40),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','flatteparser.py',41),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','flatteparser.py',42),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','flatteparser.py',43),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','flatteparser.py',44),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','flatteparser.py',45),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','flatteparser.py',46),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','flatteparser.py',47),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','flatteparser.py',48),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','flatteparser.py',49),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','flatteparser.py',50),
  ('expression -> expression NOTEQUALS expression','expression',3,'p_expression_binop','flatteparser.py',51),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','flatteparser.py',55),
  ('expression -> NOT expression','expression',2,'p_expression_unary','flatteparser.py',56),
  ('expression -> LET NAME EQUALS expression IN expression','expression',6,'p_expression_let','flatteparser.py',60),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if','flatteparser.py',64),
  ('expression -> basicexpression','expression',1,'p_expression_basic','flatteparser.py',68),
  ('basicexpression -> LPAREN expression RPAREN','basicexpression',3,'p_basicexpression_group','flatteparser.py',73),
  ('basicexpression -> TRUE','basicexpression',1,'p_basicexpression_true','flatteparser.py',77),
  ('basicexpression -> FALSE','basicexpression',1,'p_basicexpression_false','flatteparser.py',81),
  ('basicexpression -> NUMBER','basicexpression',1,'p_basicexpression_number','flatteparser.py',85),
  ('basicexpression -> NAME','basicexpression',1,'p_basicexpression_name','flatteparser.py',89),
]
