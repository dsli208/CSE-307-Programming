
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLETINnonassocIFELSErightORrightANDleftEQUALSNOTEQUALSLEQGEQLTGTleftPLUSMINUSleftTIMESDIVIDEMODnonassocFUNARROWnonassocNOTFSTSNDrightAPPLYAND ARROW CMD_USE COMMA DIVIDE DOUBLESEMICOLON ELSE EQUALS FALSE FST FUN GEQ GT IF IN LEQ LET LPAREN LT MINUS MOD NAME NOT NOTEQUALS NUMBER OR PLUS RPAREN SIMPLESTRING SND THEN TIMES TRUEstatements : emptystatements : statement DOUBLESEMICOLON statementsstatement : expressionstatement : commandexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression EQUALS expression\n                  | expression LEQ expression\n                  | expression LT expression\n                  | expression GEQ expression\n                  | expression GT expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression NOTEQUALS expressionexpression : MINUS expression %prec NOT\n                  | FST expression\n                  | SND expression\n                  | NOT expressionexpression : LET NAME EQUALS expression IN expressionexpression : LET NAME args EQUALS expression IN expressionexpression : IF expression THEN expression ELSE expressionexpression : basicexpression basicexpression %prec APPLYexpression : FUN NAME ARROW expressionexpression : basicexpressionbasicexpression : LPAREN expression RPARENbasicexpression : LPAREN expression COMMA expression RPARENbasicexpression : TRUEbasicexpression : FALSEbasicexpression : NUMBERbasicexpression : NAMEargs : argargs : arg argsarg : NAMEarg : LPAREN NAME COMMA NAME RPARENcommand : CMD_USE SIMPLESTRINGempty :'
    
_lr_action_items = {'NOTEQUALS':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,36,36,-25,-19,-18,36,-20,-21,-28,36,36,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,36,-26,36,36,-29,36,36,36,36,]),'ARROW':([23,],[46,]),'THEN':([3,4,7,15,16,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,68,74,80,82,83,],[-32,-27,-30,-31,-33,-25,-19,-18,53,-20,-21,-28,-15,-16,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,-26,-29,-22,-24,-23,]),'NUMBER':([0,2,3,4,5,7,8,13,14,15,16,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,53,70,74,76,78,79,],[3,3,-32,3,3,-30,3,3,3,-31,-33,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-28,3,3,3,3,3,-29,3,3,3,]),'FST':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'SIMPLESTRING':([11,],[27,]),'FUN':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'TRUE':([0,2,3,4,5,7,8,13,14,15,16,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,53,70,74,76,78,79,],[7,7,-32,7,7,-30,7,7,7,-31,-33,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-28,7,7,7,7,7,-29,7,7,7,]),'MINUS':([0,2,3,4,5,7,8,13,14,15,16,18,19,20,21,22,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,74,75,76,78,79,80,82,83,],[8,8,-32,-27,8,-30,8,8,8,-31,-33,8,42,42,-25,-19,-18,8,42,-20,-21,8,8,8,8,8,8,8,8,8,8,8,8,8,-28,8,8,8,8,42,42,42,42,-8,42,42,-7,42,42,-5,-6,-9,42,-26,8,42,42,-29,42,8,8,8,42,42,42,]),'GEQ':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,33,33,-25,-19,-18,33,-20,-21,-28,33,33,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,33,-26,33,33,-29,33,33,33,33,]),'RPAREN':([3,4,7,15,16,20,21,22,24,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,80,81,82,83,],[-32,-27,-30,-31,-33,44,-25,-19,-18,-20,-21,-28,-15,-16,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,74,-26,-29,-22,84,-24,-23,]),'LT':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,40,40,-25,-19,-18,40,-20,-21,-28,40,40,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,40,-26,40,40,-29,40,40,40,40,]),'PLUS':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,41,41,-25,-19,-18,41,-20,-21,-28,41,41,41,41,-8,41,41,-7,41,41,-5,-6,-9,41,-26,41,41,-29,41,41,41,41,]),'COMMA':([3,4,7,15,16,20,21,22,24,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,68,72,74,80,82,83,],[-32,-27,-30,-31,-33,45,-25,-19,-18,-20,-21,-28,-15,-16,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,-26,77,-29,-22,-24,-23,]),'CMD_USE':([0,25,],[11,11,]),'$end':([0,1,12,25,47,],[-39,0,-1,-39,-2,]),'GT':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,34,34,-25,-19,-18,34,-20,-21,-28,34,34,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,34,-26,34,34,-29,34,34,34,34,]),'DIVIDE':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,35,35,-25,-19,-18,35,-20,-21,-28,35,35,35,35,-8,35,35,-7,35,35,35,35,-9,35,-26,35,35,-29,35,35,35,35,]),'EQUALS':([3,4,7,15,16,19,20,21,22,24,26,28,29,30,44,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,74,75,80,82,83,84,],[-32,-27,-30,-31,-33,37,37,-25,-19,-18,51,37,-20,-21,-28,-36,-34,70,37,37,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,37,-26,-35,37,37,-29,37,37,37,37,-37,]),'TIMES':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,38,38,-25,-19,-18,38,-20,-21,-28,38,38,38,38,-8,38,38,-7,38,38,38,38,-9,38,-26,38,38,-29,38,38,38,38,]),'LPAREN':([0,2,3,4,5,7,8,13,14,15,16,18,25,26,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,70,74,76,78,79,84,],[2,2,-32,2,2,-30,2,2,2,-31,-33,2,2,52,2,2,2,2,2,2,2,2,2,2,2,2,2,-28,2,2,-36,52,2,2,2,-29,2,2,2,-37,]),'IN':([3,4,7,15,16,21,22,24,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,74,75,80,82,83,],[-32,-27,-30,-31,-33,-25,-19,-18,-20,-21,-28,-15,-16,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,-26,76,-29,79,-22,-24,-23,]),'ELSE':([3,4,7,15,16,21,22,24,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,68,73,74,80,82,83,],[-32,-27,-30,-31,-33,-25,-19,-18,-20,-21,-28,-15,-16,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,-26,78,-29,-22,-24,-23,]),'DOUBLESEMICOLON':([3,4,7,9,15,16,17,19,21,22,24,27,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,68,74,80,82,83,],[-32,-27,-30,25,-31,-33,-4,-3,-25,-19,-18,-38,-20,-21,-28,-15,-16,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,-26,-29,-22,-24,-23,]),'IF':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'AND':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,31,31,-25,-19,-18,31,-20,-21,-28,31,31,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,31,-26,31,31,-29,31,31,31,31,]),'SND':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FALSE':([0,2,3,4,5,7,8,13,14,15,16,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,53,70,74,76,78,79,],[15,15,-32,15,15,-30,15,15,15,-31,-33,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-28,15,15,15,15,15,-29,15,15,15,]),'NAME':([0,2,3,4,5,6,7,8,10,13,14,15,16,18,25,26,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,52,53,70,74,76,77,78,79,84,],[16,16,-32,16,16,23,-30,16,26,16,16,-31,-33,16,16,48,16,16,16,16,16,16,16,16,16,16,16,16,16,-28,16,16,-36,48,16,72,16,16,-29,16,81,16,16,-37,]),'LEQ':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,39,39,-25,-19,-18,39,-20,-21,-28,39,39,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,39,-26,39,39,-29,39,39,39,39,]),'LET':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'NOT':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'OR':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,32,32,-25,-19,-18,32,-20,-21,-28,-15,32,-13,-14,-8,-17,-10,-7,-11,-12,-5,-6,-9,32,-26,32,32,-29,32,32,32,32,]),'MOD':([3,4,7,15,16,19,20,21,22,24,28,29,30,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,75,80,82,83,],[-32,-27,-30,-31,-33,43,43,-25,-19,-18,43,-20,-21,-28,43,43,43,43,-8,43,43,-7,43,43,43,43,-9,43,-26,43,43,-29,43,43,43,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,25,],[1,47,]),'args':([26,49,],[50,69,]),'basicexpression':([0,2,4,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[4,4,21,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'command':([0,25,],[17,17,]),'statement':([0,25,],[9,9,]),'arg':([26,49,],[49,49,]),'expression':([0,2,5,8,13,14,18,25,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,51,53,70,76,78,79,],[19,20,22,24,28,29,30,19,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,75,80,82,83,]),'empty':([0,25,],[12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> empty','statements',1,'p_statements_empty','flatteparser.py',37),
  ('statements -> statement DOUBLESEMICOLON statements','statements',3,'p_statements_multiple','flatteparser.py',41),
  ('statement -> expression','statement',1,'p_statement_expression','flatteparser.py',46),
  ('statement -> command','statement',1,'p_statement_command','flatteparser.py',49),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','flatteparser.py',54),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','flatteparser.py',55),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','flatteparser.py',56),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','flatteparser.py',57),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','flatteparser.py',58),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','flatteparser.py',59),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','flatteparser.py',60),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','flatteparser.py',61),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','flatteparser.py',62),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','flatteparser.py',63),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','flatteparser.py',64),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','flatteparser.py',65),
  ('expression -> expression NOTEQUALS expression','expression',3,'p_expression_binop','flatteparser.py',66),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','flatteparser.py',70),
  ('expression -> FST expression','expression',2,'p_expression_unary','flatteparser.py',71),
  ('expression -> SND expression','expression',2,'p_expression_unary','flatteparser.py',72),
  ('expression -> NOT expression','expression',2,'p_expression_unary','flatteparser.py',73),
  ('expression -> LET NAME EQUALS expression IN expression','expression',6,'p_expression_let','flatteparser.py',77),
  ('expression -> LET NAME args EQUALS expression IN expression','expression',7,'p_expression_let_fundef','flatteparser.py',81),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if','flatteparser.py',85),
  ('expression -> basicexpression basicexpression','expression',2,'p_expression_apply','flatteparser.py',89),
  ('expression -> FUN NAME ARROW expression','expression',4,'p_expression_fundef','flatteparser.py',93),
  ('expression -> basicexpression','expression',1,'p_expression_basic','flatteparser.py',97),
  ('basicexpression -> LPAREN expression RPAREN','basicexpression',3,'p_basicexpression_group','flatteparser.py',102),
  ('basicexpression -> LPAREN expression COMMA expression RPAREN','basicexpression',5,'p_basicexpression_pair','flatteparser.py',106),
  ('basicexpression -> TRUE','basicexpression',1,'p_basicexpression_true','flatteparser.py',110),
  ('basicexpression -> FALSE','basicexpression',1,'p_basicexpression_false','flatteparser.py',114),
  ('basicexpression -> NUMBER','basicexpression',1,'p_basicexpression_number','flatteparser.py',118),
  ('basicexpression -> NAME','basicexpression',1,'p_basicexpression_name','flatteparser.py',122),
  ('args -> arg','args',1,'p_args_single','flatteparser.py',127),
  ('args -> arg args','args',2,'p_args_multiple','flatteparser.py',131),
  ('arg -> NAME','arg',1,'p_arg_name','flatteparser.py',135),
  ('arg -> LPAREN NAME COMMA NAME RPAREN','arg',5,'p_arg_pair','flatteparser.py',139),
  ('command -> CMD_USE SIMPLESTRING','command',2,'p_command','flatteparser.py',144),
  ('empty -> <empty>','empty',0,'p_empty','flatteparser.py',154),
]
